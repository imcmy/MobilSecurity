package com.oc.mobilsecurity.contact;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyStore;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManagerFactory;

import android.util.Log;

public class Client {

	private static final String DEFAULT_HOST = "121.48.228.192";
	private static final int DEFAULT_PORT = 7777;

	private static final String CLIENT_KEY_STORE_PASSWORD = "mfs007";
	private static final String CLIENT_TRUST_KEY_STORE_PASSWORD = "mfs007";
	
	private SSLSocket sslSocket;
	
	/**
	 * 启动客户端程序
	 * 
	 * @param args
	 */
	/*
	public static void main(String[] args) {
		Client client = new Client();
		client.init();
		client.process();
	}
	 */
	public String process(String message) {
		if (sslSocket == null) {
			Log.v("TAG", "Error");
			return "null";
		}
		try {
			InputStream input = sslSocket.getInputStream();
			OutputStream output = sslSocket.getOutputStream();

			BufferedInputStream bis = new BufferedInputStream(input);
			BufferedOutputStream bos = new BufferedOutputStream(output);

			bos.write(message.getBytes());
			bos.flush();

			byte[] buffer = new byte[20];
			bis.read(buffer);
			String result = new String(buffer).trim();
			sslSocket.close();
			return result;
		} catch (IOException e) {
			return "error";
		}
	}

	public void init() {
		try {
			SSLContext ctx = SSLContext.getInstance("SSL");

			KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
			TrustManagerFactory tmf = TrustManagerFactory
					.getInstance("SunX509");

			KeyStore ks = KeyStore.getInstance("JKS");
			KeyStore tks = KeyStore.getInstance("JKS");

			ks.load(new FileInputStream("kclient.keystore"),
					CLIENT_KEY_STORE_PASSWORD.toCharArray());
			tks.load(new FileInputStream("tclient.keystore"),
					CLIENT_TRUST_KEY_STORE_PASSWORD.toCharArray());

			kmf.init(ks, CLIENT_KEY_STORE_PASSWORD.toCharArray());
			tmf.init(tks);

			ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

			sslSocket = (SSLSocket) ctx.getSocketFactory().createSocket(
					DEFAULT_HOST, DEFAULT_PORT);
		} catch (Exception e) {
			System.out.println(e);
		}
	}

}
